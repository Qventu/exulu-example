import { z } from "zod";
import { Stagehand } from "@browserbasehq/stagehand";
import { Browserbase } from "@browserbasehq/sdk";
import { ExuluTool } from "@exulu/backend";

// todo move this to the own tools/browserbase package so it can be installed seperately and doesnt bloat the main Exulu package
// todo make this a config variable the admin can set in the UI
const PROJECT_ID = "811444dd-6e6d-40b5-bd90-541c93e44be6";
process.env.BROWSERBASE_PROJECT_ID = PROJECT_ID;
const BB_API_KEY = "bb_live_LwMwNgZB5cIEKcBwMuAugrgNkFM";
const CITY = "MUNICH";
const COUNTRY = "DE";

async function createContext() {
    const bb = new Browserbase({ apiKey: BB_API_KEY });
    const context = await bb.contexts.create({
        projectId: PROJECT_ID,
    });
    return context;
}

async function createAuthSession(contextId: string): Promise<{ url: string, id: string }> {
    const bb = new Browserbase({ apiKey: BB_API_KEY });

    const session = await bb.sessions.create({
        projectId: PROJECT_ID,
        browserSettings: {
            context: {
                id: contextId,
                persist: true
            }
        },
        /* proxies: [{ // not included in the free tier
            type: "browserbase",
            geolocation: {
                city: CITY,
                country: COUNTRY
            }
        }] */
    });

    const liveViewLinks = await bb.sessions.debug(session.id);
    const liveViewLink = liveViewLinks.debuggerFullscreenUrl;
    console.log(`🔍 Live View Link: ${liveViewLink}`);
    console.log("Session URL: https://browserbase.com/sessions/" + session.id);
    return {
        url: liveViewLink,
        id: session.id
    };
}

const createSession = new ExuluTool({
    id: `create_browserbase_session`,
    type: "function",
    name: "Create a browserbase session.",
    description: `
    Creates a browserbase session and returns the live view url as well as 
    the session id as a JSON object. A browserbase session is a headless browser
    that can be used to to visit websites and perform actions.
    `,
    config: [],
    execute: async () => {
        const { id } = await createContext();
        const result = await createAuthSession(id);
        return {
            result: result.url
        };
    },
})

const askChatgpt = new ExuluTool({
    id: `ask_chatgpt_browserbase`,
    type: "function",
    name: "ChatGPT browserbase operation.",
    config: [],
    inputSchema: z.object({
        session: z.string().describe("The session id of the browserbase session."),
        question: z.string().describe("The question to ask ChatGPT."),
    }),
    description: `Uses an existing, authenticated browserbase session to visit ChatGPT and perform actions such as asking questions.`,
    execute: async ({ session, question }: any) => {
        const stagehand = new Stagehand({
            // With npx create-browser-app, this config is found 
            // in a separate stagehand.config.ts file
            env: "BROWSERBASE", // set to "LOCAL" for local development
            apiKey: BB_API_KEY, // todo make this a config variable the admin can set in the UI
            modelName: "openai/gpt-4.1-mini", // todo change to claude || optionally make configurable?
            browserbaseSessionID: session,
            modelClientOptions: {
                apiKey: process.env.OPENAI_API_KEY, // todo make this a config variable the admin can set in the UI
            },
        });
        await stagehand.init();
        const page = stagehand.page;
        await page.goto("https://chatgpt.com");
        await page.act(`Type in '${question}' into the search bar`);
        const { answer } = await page.extract({
            instruction: "The answer to the question generated by ChatGPT.",
            schema: z.object({
                answer: z.string(),
            }),
        });
        console.log(answer)
        await stagehand.close();
        return {
            result: answer
        };
    },
})

export { createSession, askChatgpt };